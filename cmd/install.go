package cmd

import (
	"errors"
	"fmt"
	"github.com/codefresh-io/cf-gitops-controller/pkg/install"
	"github.com/codefresh-io/cf-gitops-controller/pkg/kube"
	"github.com/codefresh-io/cf-gitops-controller/pkg/logger"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"os"
	"os/user"
	"path"
)

var FAILED = "FAILED"
var installCmdOptions = install.CmdOptions{}

var installCmd = &cobra.Command{
	Use:   "install",
	Short: "Install gitops codefresh",
	Long:  `Install gitops codefresh`,
	RunE: func(cmd *cobra.Command, args []string) error {
		kubeOptions := installCmdOptions.Kube
		kubeClient, err := kube.New(&kube.Options{
			ContextName:      kubeOptions.Context,
			Namespace:        kubeOptions.Namespace,
			PathToKubeConfig: kubeOptions.ConfigPath,
		})
		if err != nil {
			return err
		}

		namespaceIsExist, err := kubeClient.NamespaceExists()
		if namespaceIsExist != true {
			logger.Info(fmt.Sprintf("Creating namespace \"%s\"...", installCmdOptions.Kube.Namespace))
			err = kubeClient.CreateNamespace()
			if err != nil {
				return failInstallation(fmt.Sprintf("Can't create namespace %s: \"%s\"", installCmdOptions.Kube.Namespace, err.Error()))
			}
		}

		logger.Info(fmt.Sprint("Creating argocd resources..."))
		err = kubeClient.CreateDeployments(installCmdOptions.ManifestPath)
		if err != nil {
			return failInstallation(fmt.Sprintf("Can't create argocd resources: \"%s\"", err.Error()))
		}

		logger.Info(fmt.Sprint("Changing service type to \"LoadBalancer\"..."))

		argocdServer, err := kubeClient.GetDeployments("app.kubernetes.io/name=argocd-server")
		if err == nil {
			err = kubeClient.UpdateDeployments(argocdServer)
		}
		if err != nil {
			return failInstallation(fmt.Sprintf("Can't change service type to LoadBalancer: \"%s\"", err.Error()))
		}

		logger.Info(fmt.Sprint("Getting argocd ip address..."))
		host, err := kubeClient.GetArgoServerHost()
		fmt.Print(host)
		if err != nil {
			return failInstallation(fmt.Sprintf("Can't change service type to LoadBalancer: \"%s\"", err.Error()))
		}

		logger.Info(fmt.Sprint("Getting autogenerated password..."))
		autogenerated, err := kubeClient.GetAutogeneratedPassword()
		fmt.Println(autogenerated)
		if err != nil {
			return failInstallation(fmt.Sprintf("Can't change service type to LoadBalancer: \"%s\"", err.Error()))
		}

		logger.Info(fmt.Sprint("Getting argocd token..."))
		//const argocdToken = await rp({
		//            method: 'POST',
		//            uri: `${host}/api/v1/session`,
		//            body: {
		//                username: 'admin',
		//                password: autogenerated,
		//            },
		//            json: true,
		//        });

		logger.Info(fmt.Sprint("Updating admin password..."))
		//await rp({
		//            method: 'PUT',
		//            uri: `${host}/api/v1/account/password`,
		//            headers: {
		//                Authorization: `Bearer ${argocdToken.token}`,
		//            },
		//            body: {
		//                currentPassword: autogenerated,
		//                name: 'admin',
		//                newPassword: password,
		//            },
		//            json: true,
		//        });

		logger.Success(fmt.Sprint("Successfully installed codefresh gitops controller"))

		return nil
	},
}

func init() {
	rootCmd.AddCommand(installCmd)
	flags := installCmd.Flags()

	flags.StringVar(&installCmdOptions.Argo.Password, "set-argo-password", "", "Set password for admin user of new argocd installation")
	flags.StringVar(&installCmdOptions.Kube.Namespace, "kube-namespace", "", "Namespace in Kubernetes cluster")
	flags.StringVar(&installCmdOptions.ManifestPath, "install-manifest", "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml", "Url of argocd install manifest")

	var kubeConfigPath string
	currentUser, _ := user.Current()
	if currentUser != nil {
		kubeConfigPath = os.Getenv("KUBECONFIG")
		if kubeConfigPath == "" {
			kubeConfigPath = path.Join(currentUser.HomeDir, ".kube", "config")
		}
	}

	flags.StringVar(&installCmdOptions.Kube.ConfigPath, "kube-config-path", kubeConfigPath, "Path to kubeconfig file (default is $HOME/.kube/config)")
	flags.StringVar(&installCmdOptions.Kube.Context, "kube-context-name", viper.GetString("kube-context"), "Name of the kubernetes context on which Argo agent should be installed (default is current-context) [$KUBE_CONTEXT]")

}

func sendControllerInstalledEvent(status string, msg string) {

}

func failInstallation(msg string) error {
	sendControllerInstalledEvent(FAILED, msg)
	return errors.New(msg)
}
